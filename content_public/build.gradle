buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}


apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"


    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 15
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            // assets.srcDirs = ['assets']
        }

        // androidTest.setRoot('tests')
    }
}

def readLocalPropertiesValue = { key ->
    if (!project.rootProject.file("local.properties").exists()) {
        return ""
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    return properties.getProperty(key)
}

def guessSdkDir = {
    def sdkDir = readLocalPropertiesValue("sdk.dir")
    if (sdkDir) {
        return sdkDir
    }

    [
            "/Applications/Android Studio.app/sdk",
            "/usr/local/opt/android-sdk", // brew --prefix android-sdk
            System.getenv("ANDROID_SDK"),
            System.getenv("ANDROID_HOME"),
    ].each { dir ->
        if (dir != null && file(dir).exists()) {
            sdkDir = dir
        }
    }
    return sdkDir
}

task compileAidl << {
    FileTree aidls = fileTree('src').include('**/I*.aidl')
    aidls.each {File aidl ->
        println "start:" + aidl.toString()
        def shell = ("${guessSdkDir()}/build-tools/${android.buildToolsVersion}/aidl "
                + "-p${guessSdkDir()}/platforms/${android.compileSdkVersion}/framework.aidl "
                + "-p${file("src/org/chromium/content/common/common.aidl")} "
                + "-I${file('src')} "
                + "-o${file('build/source/aidl/debug')} "
                + "${aidl.absolutePath}")
        def proc = shell.execute()
        proc.in.eachLine {line -> println line}
        proc.err.eachLine {line -> println 'stderr: ' + line}
        proc.waitFor()
        compileReleaseAidl.enabled = false
    }
}

afterEvaluate {
    compileReleaseAidl.dependsOn(compileAidl)
}



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:23.1.0"
    compile "com.android.support:mediarouter-v7:23.1.0"
}


